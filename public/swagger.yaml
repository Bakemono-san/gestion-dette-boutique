openapi: 3.0.0
info:
  title: Boutique Management API
  version: 1.0.0
  description: API documentation for the Boutique Management application

servers:
  - url: http://localhost:8000/api  

security:
  - BearerAuth: []
  

paths:
  /v1/login:
    post:
      summary: Authenticate a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/logout:
    post:
      summary: Log out a user
      tags:
        - Authentication
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /v1/role:
    post:
      summary: Create a new role
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/users:
    get:
      summary: Get a list of users
      tags:
        - Users
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [ADMIN, BOUTIQUIER, CLIENT]
          description: Filter users by role
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/clients:
    get:
      summary: Get a list of clients
      tags:
        - Clients
      responses:
        '200':
          description: A list of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
    post:
      summary: Create a new client
      tags:
        - Clients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreClientRequest'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/clients/{id}:
    get:
      summary: Get a client by ID
      tags:
        - Clients
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client to retrieve
      responses:
        '200':
          description: A single client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Register a user for a client
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client for whom to register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUserRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/clients/{id}/user:
    get:
      summary: Get the user associated with a client
      tags:
        - Clients
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client
      responses:
        '200':
          description: User associated with the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/clients/{id}/dettes:
    get:
      summary: Get debts associated with a client
      tags:
        - Clients
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client
      responses:
        '200':
          description: List of debts for the client
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Debt'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/articles:
    get:
      summary: Get a list of articles
      tags:
        - Articles
      responses:
        '200':
          description: A list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
    post:
      summary: Create a new article
      tags:
        - Articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreArticleRequest'
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/articles/{id}:
    get:
      summary: Get an article by ID
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the article to retrieve
      responses:
        '200':
          description: A single article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an article by ID
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the article to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an article by ID
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the article to delete
      responses:
        '200':
          description: Article deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid request

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Success

    Role:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Admin

    User:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: user@example.com
        role:
          type: string
          example: Admin

    Client:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Jane Doe
        phone:
          type: string
          example: +1234567890
        address:
          type: string
          example: 123 Main St
        photo:
          type: string
          format: uri
          example: http://example.com/photo.jpg

    Debt:
      type: object
      properties:
        id:
          type: string
          example: 123
        client_id:
          type: string
          example: 456
        amount:
          type: number
          format: float
          example: 150.75
        amount_paid:
          type: number
          format: float
          example: 50.00
        remaining_amount:
          type: number
          format: float
          example: 100.75
        quantity:
          type: integer
          example: 5
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        sold_amount:
          type: number
          format: float
          example: 75.00

    Article:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Product A
        price:
          type: number
          format: float
          example: 30.00

    StoreRoleRequest:
      type: object
      properties:
        name:
          type: string
          example: Admin

    StoreUserRequest:
      type: object
      properties:
        nom:
          type: string
          example: Doe
        prenom:
          type: string
          example: John
        password:
          type: string
          example: Pourquoipas34$
        password_confirmation:
          type: string
          example: Pourquoipas34$
        role_id:
          type: integer
          example: 1
        etat:
          type: boolean
          example: true
        login:
          type: string
          example: bakemono
        

    StoreClientRequest:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
        phone:
          type: string
          example: +1234567890
        address:
          type: string
          example: 123 Main St
        photo:
          type: string
          format: uri
          example: http://example.com/photo.jpg

    UpdateArticleRequest:
      type: object
      properties:
        name:
          type: string
          example: Updated Product A
        price:
          type: number
          format: float
          example: 35.00

    StoreArticleRequest:
      type: object
      properties:
        libelle:
          type: string
        user_id:
          type: string
        prix:
          type: number
          format: float
        quantite:
          type: integer